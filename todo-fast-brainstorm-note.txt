there is also a nice way to set content security policy and security protocols in place,
an optional development bridge between the console errors and logs of windows with the terminal (send logs to the terminal)
there is also a way to create windows easily that can be closed and reopened while other windows are also closed.
there is a nice tray button and a very organized project structure

and there is an automation script with bun new-win that can create new windows,
and the hot reload is smart it watches for changes in the public directory and refreshes the page instantly and rebuilds the typescript,
typescript usually can't run on the web but it runs it,
and it supports bundled npm packages so developing is fun again,
and there is a hotreload for when you make changes to the src or windows of the electron app itself,
and an upcoming backend for my future business endeavors,
and plugins that will let you integrate other apps and share functionality between them,
for example running a python server,
and there is an AI research I am conducting in regards of developing what I like to call Burgil Personal Computer,
there are already 5 windows: nice notification system that I built,
with transparent ui that looks too good to be true,
there is a basic design for the plugin marketplace,
this is the place where I will be working the most in terms of frontend design,
and there is already a nice settings page and a disclaimer page and a page for testing STT,
VAD,
TTS and local LLM all in one place! with optimized libraries from safe places,
thank everyone else whose projects I used in one way or another but in no way that makes my app irrelevant in fact this is like asking whats next now that we have all this cool technologies can we make a stack out of them?
in this repo there is minimal code snippets and text from groq,
deepgram,
openai,
expressjs,

runtimes used are nodejs,
bun,
python
there are cool plugins that I created for detecting objects on the screen in real time,
in the examples I used the trash bin icon,
since I see risks involved in developing what I called the "ai-vision-server" plugin then I am waiting with this feature,
giving eyes to the computer can wait,
giving hands brain mouth and ears is the top priority,
later moderation layers will be added to prevent abuse and only then I consider going open source,
for drawing on the screen on the "ai-vision-server" I used opencv python and pyqt5
pyautogui is used to take screenshots,
flask is used to host the backend example but it will be switched soon,
jimp is used in another plugin called "screenshot-taker" that can help the ai-vision-server find new objects it can detect on the screen,
outputting the coordinates of them for mouse movement,
but since this is why we can't have good things this feature will wait until I can ensure in some way it wont be abused in any way.
logos were created by myself,
name is up for change,
feel free to contact for VCs,
theres also tailwind,
a lot of snippets for css,
js,
html,
ts and python written exclusively by Burgil,
me. there are some unused libraries that needs to be removed,
links in the html to font awesome,
local llm thanks to @mlc-ai/web-llm the vad is thanks to @ricky0123/vad-web and onnxruntime-web
but make it clear that these are just small core elements of a much bigger picture and that they were heavily modified and sprinkled with burgil magic dust and hands,

and mostly code written by none other than myself.